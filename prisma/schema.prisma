// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id           String        @id @default(uuid())
  licencePlate String        @unique
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  Reservation  Reservation[]
}

model ParkingSpace {
  id            String             @id @default(uuid())
  label         String
  level         Level              @relation(fields: [levelId], references: [id])
  levelId       String
  type          ParkingSpaceType
  owner         User?              @relation(fields: [ownerId], references: [id])
  ownerId       String?            @unique
  currentStatus ParkingSpaceStatus
  Reservation   Reservation[]
  Resignation   Resignation[]
}

model Reservation {
  id             String            @id @default(uuid())
  user           User              @relation(fields: [userId], references: [id])
  userId         String
  parkingSpace   ParkingSpace      @relation(fields: [parkingSpaceId], references: [id])
  parkingSpaceId String
  date           DateTime
  car            Car               @relation(fields: [carId], references: [id])
  carId          String
  type           ReservationType
  status         ReservationStatus
}

model Resignation {
  id             String       @id @default(uuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  parkingSpace   ParkingSpace @relation(fields: [parkingSpaceId], references: [id])
  parkingSpaceId String
  date           DateTime
}

model User {
  id                String        @id @default(uuid())
  name              String        @unique
  password          String
  avatar            String
  phoneNumber       String
  cars              Car[]
  Reservation       Reservation[]
  Resignation       Resignation[]
  ParkingSpace      ParkingSpace?
  coin              Int           @default(0)
  gameCars          GameCar[]
  selectedGameCar   GameCar?      @relation(fields: [selectedGameCarId], references: [id], name: "selectedGameCar")
  selectedGameCarId String?
}

model GameCar {
  id             String @id @default(uuid())
  name           String
  price          Int
  image          String
  User           User[]
  selectedByUser User[] @relation("selectedGameCar")
}

model Level {
  id           String         @id @default(uuid())
  label        String
  ParkingSpace ParkingSpace[]
}

enum NotificationType {
  LIGHTS_ON
  OTHER
  //Extend this
}

enum ParkingSpaceStatus {
  FREE
  RESERVED
  RESERVED_FOR_OWNER
  OCCUPIED
}

enum ReservationStatus {
  CREATED
  CHECKED_IN
  CHECKED_OUT
}

enum ReservationType {
  ALL_DAY
  MORNING
  AFTERNOON
}

enum ParkingSpaceType {
  NORMAL
  ELECTRIC
  DISABLED
}
