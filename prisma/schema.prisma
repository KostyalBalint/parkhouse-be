// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id           Int           @id @default(autoincrement())
  licencePlate String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  Reservation  Reservation[]
}

model ParkingSpace {
  id            Int                @id @default(autoincrement())
  label         String
  level         Level              @relation(fields: [levelId], references: [id])
  type          ParkingSpaceType
  longitude     Float
  latitude      Float
  rotation      Float
  owner         User?              @relation(fields: [userId], references: [id])
  currentStatus ParkingSpaceStatus
  levelId       Int
  userId        Int?
  Reservation   Reservation[]
  ParkingArea   ParkingArea?       @relation(fields: [parkingAreaId], references: [id])
  parkingAreaId Int?
}

model Reservation {
  id             Int               @id @default(autoincrement())
  user           User              @relation(fields: [userId], references: [id])
  parkingSpace   ParkingSpace      @relation(fields: [parkingSpaceId], references: [id])
  date           DateTime
  car            Car               @relation(fields: [carId], references: [id])
  type           ReservationType
  status         ReservationStatus
  userId         Int
  parkingSpaceId Int
  carId          Int
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  avatar       String
  phoneNumber  String
  cars         Car[]
  ParkingSpace ParkingSpace[]
  Reservation  Reservation[]
}

model Level {
  id           Int            @id @default(autoincrement())
  label        String
  parkingArea  ParkingArea[]
  ParkingSpace ParkingSpace[]
}

model ParkingArea {
  id      Int            @id @default(autoincrement())
  label   String
  level   Level          @relation(fields: [levelId], references: [id])
  spaces  ParkingSpace[]
  levelId Int
}

enum NotificationType {
  LIGHTS_ON
  OTHER
  //Extend this
}

enum ParkingSpaceStatus {
  FREE
  RESERVED
  RESERVED_FOR_OWNER
  OCCUPIED
}

enum ReservationStatus {
  CREATED
  CHECKED_IN
  CHECKED_OUT
}

enum ReservationType {
  ALL_DAY
  MORNING
  AFTERNOON
}

enum ParkingSpaceType {
  NORMAL
  ELECTRIC
  DISABLED
}
