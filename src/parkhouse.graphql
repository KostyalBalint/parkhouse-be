type Query {
    levels: [Level!]!
    parkingSpace(id: ID!): ParkingSpace!
    myReservations: [Reservation!]!
    myResignation: [Resignation!]!
    reservation(id: ID!): Reservation!
    searchByLicencePlate(queryString: String!): [Car!]!
    user(id: ID!): User!
    myUser: User!
    gameCars: [GameCar!]!
}

type Mutation {
    makeReservation(parkingSpaceId: ID!, date: DateTime!, type: ReservationType!, carId: ID!): Reservation!
    makeResignation(parkingSpaceId: ID!, date: DateTime!, type: ReservationType!, carId: ID!): Resignation!
    changeReservationStatus(reservationId: ID!, type: ReservationType!): Reservation!
    notifyUser(userId: ID!, notificationType: NotificationType!, message: String): Boolean
    addCar(licencePlate: String!): Car!
    removeCar(carId: ID!): Boolean
    login(userName: String!, password: String!): LoginResponse!
    buyGameCar(gameCarId: ID!): Boolean
    selectGameCar(gameCarId: ID!): Boolean
}

type User {
    id: ID!
    name: String!
    avatar: String!
    phoneNumber: String!
    cars: [Car!]!
    parkingSpace: ParkingSpace
    hasFixedParkingSpace: Boolean!
    coin: Int!
    ownedGameCars: [GameCar!]!
    selectedGameCar: GameCar!
}

type LoginResponse {
    user: User!
    token: String!
}

enum NotificationType {
    LIGHTS_ON
    OTHER
    # TODO: Extend
}

type Car {
    id: ID!
    name: String!
    licencePlate: String!
    user: User!
}

type ParkingSpace {
    id: ID!
    label: String!
    level: Level!
    type: ParkingSpaceType!
    owner: User
    currentStatus: ParkingSpaceStatus!
}

type GameCar {
    id: ID!
    name: String!
    price: Int!
    image: String!
    ownedByMe: Boolean!
}

enum ParkingSpaceStatus {
    FREE
    RESERVED
    RESERVED_FOR_OWNER
    OCCUPIED
}

type Reservation {
    id: ID!
    user: User!
    parkingSpace: ParkingSpace!
    date: DateTime!
    car: Car!
    type: ReservationType!
    status: ReservationStatus!
}

type Resignation {
    id: ID!
    user: User!
    parkingSpace: ParkingSpace!
    date: DateTime!
}

type Level {
    id: ID!
    label: String!
    spaces: [ParkingSpace!]!
}

enum ReservationStatus {
    CREATED
    CHECKED_IN
    CHECKED_OUT
}

enum ReservationType {
    ALL_DAY
    MORNING
    AFTERNOON
}

enum ParkingSpaceType {
    NORMAL
    ELECTRIC
    DISABLED
}

scalar DateTime